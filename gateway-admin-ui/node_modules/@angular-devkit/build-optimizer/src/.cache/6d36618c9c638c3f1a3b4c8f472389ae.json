{"remainingRequest":"/home/jenkins/jenkins-slave/workspace/Knox-1.4.0/gateway-admin-ui/node_modules/@angular-devkit/build-optimizer/src/build-optimizer/webpack-loader.js??ref--3-1!/home/jenkins/jenkins-slave/workspace/Knox-1.4.0/gateway-admin-ui/node_modules/rest-url-builder/bin/rest-url-builder.js","dependencies":[{"path":"/home/jenkins/jenkins-slave/workspace/Knox-1.4.0/gateway-admin-ui/node_modules/rest-url-builder/bin/rest-url-builder.js","mtime":1491502732000},{"path":"/home/jenkins/jenkins-slave/workspace/Knox-1.4.0/gateway-admin-ui/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/home/jenkins/jenkins-slave/workspace/Knox-1.4.0/gateway-admin-ui/node_modules/@angular-devkit/build-optimizer/src/build-optimizer/webpack-loader.js","mtime":1519266497000}],"contextDependencies":[],"result":["\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar RestURLBuilder = /*@__PURE__*/ (function () {\n    function RestURLBuilder() {\n        this.namedParameters = {};\n        this.queryParameters = {};\n        this.parameterMatcher = /(:\\b\\D\\w*)/g;\n    }\n    RestURLBuilder.prototype.buildRestURL = function (url) {\n        var baseURL = url.substr(0, url.indexOf('?'));\n        if (baseURL.length > 0) {\n            this.baseURL = baseURL;\n            var queryParamURL = url.substr(url.indexOf('?') + 1, url.length);\n            this.extractQueryParameters(queryParamURL);\n        }\n        else {\n            this.baseURL = url;\n        }\n        this.extractNamedParameters(this.baseURL);\n        return this;\n    };\n    RestURLBuilder.prototype.extractNamedParameters = function (url) {\n        var _this = this;\n        var parameters = url.match(this.parameterMatcher);\n        if (parameters) {\n            parameters.forEach(function (value) { return _this.namedParameters[value] = null; });\n        }\n    };\n    RestURLBuilder.prototype.extractQueryParameters = function (url) {\n        var _this = this;\n        var parameters = url.match(this.parameterMatcher);\n        parameters.forEach(function (value) { return _this.queryParameters[value] = null; });\n    };\n    RestURLBuilder.prototype.setNamedParameter = function (paramName, value) {\n        this.setParameter(paramName, value, this.namedParameters);\n    };\n    RestURLBuilder.prototype.getNamedParameters = function () {\n        return this.namedParameters;\n    };\n    RestURLBuilder.prototype.setQueryParameter = function (paramName, value) {\n        this.setParameter(paramName, value, this.queryParameters);\n    };\n    RestURLBuilder.prototype.getQueryParameters = function () {\n        return this.queryParameters;\n    };\n    RestURLBuilder.prototype.setParameter = function (paramName, value, paramType) {\n        if (':' + paramName in paramType) {\n            paramType[':' + paramName] = value;\n            return this;\n        }\n        throw 'parameter ' + paramName + ' does not exist in the url: ' + this.baseURL;\n    };\n    RestURLBuilder.prototype.get = function () {\n        var restURL = this.baseURL;\n        restURL = this.substitueNamedParameters(this.baseURL);\n        restURL = this.substitueQueryParameters(restURL);\n        return restURL;\n    };\n    RestURLBuilder.prototype.substitueNamedParameters = function (url) {\n        return this.substitute(url, this.namedParameters, true, false);\n    };\n    RestURLBuilder.prototype.substitueQueryParameters = function (url) {\n        return this.substitute(url, this.queryParameters, false, true);\n    };\n    RestURLBuilder.prototype.substitute = function (url, parameters, substituteALL, isQueryParam) {\n        var _this = this;\n        Object.keys(parameters)\n            .forEach(function (parameter) {\n            var value = parameters[parameter];\n            if (!value && substituteALL) {\n                throw new Error('The parameter ' + parameter + ' has not been set');\n            }\n            if (!isQueryParam) {\n                url = url.replace(parameter, value);\n            }\n            if (isQueryParam && value) {\n                if (!_this.firstQueryInvoked) {\n                    _this.firstQueryInvoked = true;\n                    url = url + '?' + parameter.slice(1) + '=' + value;\n                }\n                else {\n                    url = url + '&' + parameter.slice(1) + '=' + value;\n                }\n            }\n        });\n        return url;\n    };\n    RestURLBuilder.prototype.getBaseURL = function () {\n        return this.baseURL;\n    };\n    return RestURLBuilder;\n}());\nexports.RestURLBuilder = RestURLBuilder;\n",null]}