{"remainingRequest":"/home/jenkins/jenkins-slave/workspace/Knox-1.4.0/gateway-admin-ui/node_modules/@angular-devkit/build-optimizer/src/build-optimizer/webpack-loader.js??ref--3-1!/home/jenkins/jenkins-slave/workspace/Knox-1.4.0/gateway-admin-ui/node_modules/ng2-ace-editor/src/directive.js","dependencies":[{"path":"/home/jenkins/jenkins-slave/workspace/Knox-1.4.0/gateway-admin-ui/node_modules/ng2-ace-editor/src/directive.js","mtime":1511683283000},{"path":"/home/jenkins/jenkins-slave/workspace/Knox-1.4.0/gateway-admin-ui/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/home/jenkins/jenkins-slave/workspace/Knox-1.4.0/gateway-admin-ui/node_modules/@angular-devkit/build-optimizer/src/build-optimizer/webpack-loader.js","mtime":1519266497000}],"contextDependencies":[],"result":["import { Directive, EventEmitter, Output, ElementRef, Input } from \"@angular/core\";\nimport \"brace\";\nimport \"brace/theme/monokai\";\nimport \"brace/mode/html\";\nvar AceEditorDirective = /*@__PURE__*/ (function () {\n    function AceEditorDirective(elementRef) {\n        this.textChanged = new EventEmitter();\n        this.textChange = new EventEmitter();\n        this._options = {};\n        this._readOnly = false;\n        this._theme = \"monokai\";\n        this._mode = \"html\";\n        this._autoUpdateContent = true;\n        this._durationBeforeCallback = 0;\n        this._text = \"\";\n        var el = elementRef.nativeElement;\n        this.editor = ace[\"edit\"](el);\n        this.editor.$blockScrolling = Infinity;\n    }\n    AceEditorDirective.prototype.ngOnInit = function () {\n        this.init();\n        this.initEvents();\n    };\n    AceEditorDirective.prototype.init = function () {\n        this.editor.setOptions(this._options || {});\n        this.editor.setTheme(\"ace/theme/\" + this._theme);\n        this.setMode(this._mode);\n        this.editor.setReadOnly(this._readOnly);\n    };\n    AceEditorDirective.prototype.initEvents = function () {\n        var _this = this;\n        this.editor.on('change', function () { return _this.updateText(); });\n        this.editor.on('paste', function () { return _this.updateText(); });\n    };\n    AceEditorDirective.prototype.updateText = function () {\n        var newVal = this.editor.getValue(), that = this;\n        if (newVal === this.oldText) {\n            return;\n        }\n        if (!this._durationBeforeCallback) {\n            this._text = newVal;\n            this.textChange.emit(newVal);\n            this.textChanged.emit(newVal);\n        }\n        else {\n            if (this.timeoutSaving != null) {\n                clearTimeout(this.timeoutSaving);\n            }\n            this.timeoutSaving = setTimeout(function () {\n                that._text = newVal;\n                that.textChange.emit(newVal);\n                that.textChanged.emit(newVal);\n                that.timeoutSaving = null;\n            }, this._durationBeforeCallback);\n        }\n        this.oldText = newVal;\n    };\n    Object.defineProperty(AceEditorDirective.prototype, \"options\", {\n        set: function (options) {\n            this._options = options;\n            this.editor.setOptions(options || {});\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(AceEditorDirective.prototype, \"readOnly\", {\n        set: function (readOnly) {\n            this._readOnly = readOnly;\n            this.editor.setReadOnly(readOnly);\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(AceEditorDirective.prototype, \"theme\", {\n        set: function (theme) {\n            this._theme = theme;\n            this.editor.setTheme(\"ace/theme/\" + theme);\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(AceEditorDirective.prototype, \"mode\", {\n        set: function (mode) {\n            this.setMode(mode);\n        },\n        enumerable: true,\n        configurable: true\n    });\n    AceEditorDirective.prototype.setMode = function (mode) {\n        this._mode = mode;\n        if (typeof this._mode === 'object') {\n            this.editor.getSession().setMode(this._mode);\n        }\n        else {\n            this.editor.getSession().setMode(\"ace/mode/\" + this._mode);\n        }\n    };\n    Object.defineProperty(AceEditorDirective.prototype, \"text\", {\n        get: function () {\n            return this._text;\n        },\n        set: function (text) {\n            this.setText(text);\n        },\n        enumerable: true,\n        configurable: true\n    });\n    AceEditorDirective.prototype.setText = function (text) {\n        if (this._text !== text) {\n            if (text === null || text === undefined) {\n                text = \"\";\n            }\n            if (this._autoUpdateContent === true) {\n                this._text = text;\n                this.editor.setValue(text);\n                this.editor.clearSelection();\n            }\n        }\n    };\n    Object.defineProperty(AceEditorDirective.prototype, \"autoUpdateContent\", {\n        set: function (status) {\n            this._autoUpdateContent = status;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(AceEditorDirective.prototype, \"durationBeforeCallback\", {\n        set: function (num) {\n            this.setDurationBeforeCallback(num);\n        },\n        enumerable: true,\n        configurable: true\n    });\n    AceEditorDirective.prototype.setDurationBeforeCallback = function (num) {\n        this._durationBeforeCallback = num;\n    };\n    Object.defineProperty(AceEditorDirective.prototype, \"aceEditor\", {\n        get: function () {\n            return this.editor;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    return AceEditorDirective;\n}());\nexport { AceEditorDirective };\n//# sourceMappingURL=directive.js.map \n",null]}